name: Crear nueva imagen al actualizar
run-name: Se crea nueva imagen y se sube a dockerhub
on:
  push:
    branches:
      - main
      
    # Solo se lanza la acción si cambia el Dockerfile
    paths:
      - 'Dockerfile'
      
  schedule:
#    - cron: "*/5 * * * *"  # Ejecuta cada 5 min para pruebas
    - cron: "19 2 * * *"  # Ejecuta todos los días a las 02:19h
    
  workflow_dispatch:  # Permite lanzar manualmente desde la interfaz
    inputs:
      simular_push:
        description: "¿Simular comportamiento de push?"
        required: false
        default: "false"

jobs:
  "Actualización de imagen":
    runs-on: custom
    privileged: true
    steps:
      - name: Comprobar si es un push o un flujo manual simulado
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.simular_push }}" == "true" ]; then
              echo "Se simula el comportamiento de un push."
              echo "construir=true" >> $GITHUB_ENV
            fi
          elif [ "${{ github.event_name }}" == "push" ]; then
            echo "Es un push real. Se debe construir la imagen."
            echo "construir=true" >> $GITHUB_ENV
          else
            echo "No es un push ni una simulación. Continuando con las verificaciones cambio imagen o actualizaciones."
          fi
          
      - name: Comprobar si hay actualizaciones de Alpine
        if: env.construir != 'true'
        run: |
          echo "Se hacen comprobaciones de actualizaciones de Alpine"
          apk update
          
          updates=$(apk list -u | wc -l)
          if [ "$updates" -gt 0 ]; then
            echo "Actualizaciones disponibles en Alpine. Hay que construir imagen"
            echo "construir=true" >> $GITHUB_ENV
          else
            echo "No hay actualizaciones disponibles en Alpine."
          fi
          
      - name: Comprobando si imagen base ha cambiado
        if: env.construir != 'true'
        run: |
          echo "Realizando pull de las imagenes para comprobar si hay cambios"
          podman pull alpine:latest
          podman pull docker.io/pepramon/gitea-runer:latest
          # Se guarda que se ha hecho pull
          echo "pullEcho=true" >> $GITHUB_ENV
          
          # Se obtiene el sha de la imagen base
          base=$(podman inspect alpine:latest --format '{{index .RepoDigests 0}}' | awk -F'@' '{print $2}')
          # Se obtiene el guardado en la imagen construida
          imagen=$(podman inspect docker.io/pepramon/gitea-runer:latest --format '{{ index .Config.Labels "base_digest" }}')
          
          # Comprobación de si ha cambiado o no
          if [ "$base" == "$imagen" ]; then
            echo "La imagen base no ha cambiado."
          else
            echo "La imagen base ha cambiado. Hay que reconstruir la imagen derivada."
            echo "construir=true" >> $GITHUB_ENV
          fi
          
      - name: Checkout repositorio
        if: env.construir == 'true'
        uses: http://gitea:3000/acciones/checkout@v1
        
      - name: Hacer pull imagen del alpine
        if: ${{ env.pullEcho != 'true' && env.construir == 'true' }}
        run: |
          echo "Haciendo pull de alpine"
          podman pull alpine:latest
          
      - name: Se construye la imagen
        if: env.construir == 'true'
        run: |
          # Obtén el digest de la imagen base (alpine:latest)
          base_digest=$(podman inspect alpine:latest --format '{{index .RepoDigests 0}}' | awk -F'@' '{print $2}')
          
          # Construcción de la imagen
          podman build -t docker.io/pepramon/gitea-runer:latest --label base_digest="$base_digest" .
          
      - name: Logeo en dockerhub
        if: env.construir == 'true'
        run: podman login -u pepramon -p ${{ secrets.DOCKERHUB }} docker.io
        
      - name: Se sube la imagen
        if: env.construir == 'true'
        run: podman push docker.io/pepramon/gitea-runer:latest
